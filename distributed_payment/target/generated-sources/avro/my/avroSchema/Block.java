/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package my.avroSchema;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Block extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -162680769911527455L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Block\",\"namespace\":\"my.avroSchema\",\"fields\":[{\"name\":\"Transactions\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Transaction\",\"fields\":[{\"name\":\"serialNumber\",\"type\":\"long\"},{\"name\":\"outbank\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"outAccount\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"inbank\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"inAccount\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"outbankPartition\",\"type\":\"int\"},{\"name\":\"inbankPartition\",\"type\":\"int\"},{\"name\":\"amount\",\"type\":\"long\"},{\"name\":\"category\",\"type\":\"int\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Block> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Block> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Block> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Block> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Block> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Block to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Block from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Block instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Block fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.List<my.avroSchema.Transaction> Transactions;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Block() {}

  /**
   * All-args constructor.
   * @param Transactions The new value for Transactions
   */
  public Block(java.util.List<my.avroSchema.Transaction> Transactions) {
    this.Transactions = Transactions;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return Transactions;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: Transactions = (java.util.List<my.avroSchema.Transaction>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'Transactions' field.
   * @return The value of the 'Transactions' field.
   */
  public java.util.List<my.avroSchema.Transaction> getTransactions() {
    return Transactions;
  }



  /**
   * Creates a new Block RecordBuilder.
   * @return A new Block RecordBuilder
   */
  public static my.avroSchema.Block.Builder newBuilder() {
    return new my.avroSchema.Block.Builder();
  }

  /**
   * Creates a new Block RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Block RecordBuilder
   */
  public static my.avroSchema.Block.Builder newBuilder(my.avroSchema.Block.Builder other) {
    if (other == null) {
      return new my.avroSchema.Block.Builder();
    } else {
      return new my.avroSchema.Block.Builder(other);
    }
  }

  /**
   * Creates a new Block RecordBuilder by copying an existing Block instance.
   * @param other The existing instance to copy.
   * @return A new Block RecordBuilder
   */
  public static my.avroSchema.Block.Builder newBuilder(my.avroSchema.Block other) {
    if (other == null) {
      return new my.avroSchema.Block.Builder();
    } else {
      return new my.avroSchema.Block.Builder(other);
    }
  }

  /**
   * RecordBuilder for Block instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Block>
    implements org.apache.avro.data.RecordBuilder<Block> {

    private java.util.List<my.avroSchema.Transaction> Transactions;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(my.avroSchema.Block.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.Transactions)) {
        this.Transactions = data().deepCopy(fields()[0].schema(), other.Transactions);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
    }

    /**
     * Creates a Builder by copying an existing Block instance
     * @param other The existing instance to copy.
     */
    private Builder(my.avroSchema.Block other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.Transactions)) {
        this.Transactions = data().deepCopy(fields()[0].schema(), other.Transactions);
        fieldSetFlags()[0] = true;
      }
    }

    /**
      * Gets the value of the 'Transactions' field.
      * @return The value.
      */
    public java.util.List<my.avroSchema.Transaction> getTransactions() {
      return Transactions;
    }


    /**
      * Sets the value of the 'Transactions' field.
      * @param value The value of 'Transactions'.
      * @return This builder.
      */
    public my.avroSchema.Block.Builder setTransactions(java.util.List<my.avroSchema.Transaction> value) {
      validate(fields()[0], value);
      this.Transactions = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'Transactions' field has been set.
      * @return True if the 'Transactions' field has been set, false otherwise.
      */
    public boolean hasTransactions() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'Transactions' field.
      * @return This builder.
      */
    public my.avroSchema.Block.Builder clearTransactions() {
      Transactions = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Block build() {
      try {
        Block record = new Block();
        record.Transactions = fieldSetFlags()[0] ? this.Transactions : (java.util.List<my.avroSchema.Transaction>) defaultValue(fields()[0]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Block>
    WRITER$ = (org.apache.avro.io.DatumWriter<Block>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Block>
    READER$ = (org.apache.avro.io.DatumReader<Block>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    long size0 = this.Transactions.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (my.avroSchema.Transaction e0: this.Transactions) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      long size0 = in.readArrayStart();
      java.util.List<my.avroSchema.Transaction> a0 = this.Transactions;
      if (a0 == null) {
        a0 = new SpecificData.Array<my.avroSchema.Transaction>((int)size0, SCHEMA$.getField("Transactions").schema());
        this.Transactions = a0;
      } else a0.clear();
      SpecificData.Array<my.avroSchema.Transaction> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<my.avroSchema.Transaction>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          my.avroSchema.Transaction e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new my.avroSchema.Transaction();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 1; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          long size0 = in.readArrayStart();
          java.util.List<my.avroSchema.Transaction> a0 = this.Transactions;
          if (a0 == null) {
            a0 = new SpecificData.Array<my.avroSchema.Transaction>((int)size0, SCHEMA$.getField("Transactions").schema());
            this.Transactions = a0;
          } else a0.clear();
          SpecificData.Array<my.avroSchema.Transaction> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<my.avroSchema.Transaction>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              my.avroSchema.Transaction e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new my.avroSchema.Transaction();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










